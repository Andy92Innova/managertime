version: '0.1'
services:
  backend:
    image: node:20.12.2-alpine3.19
    command: sh -c "npm install && npm run app"
    ports: 
      - 5001:5001
    working_dir: /backend
    volumes:
      - ./backend:/backend
    healthcheck: 
      test: ["CMD", "curl", "-f", "http://localhost:5001/api"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      db:
        condition: service_healthy
    environment:
      - SERVER_PORT=5001
      - NODE_ENV=production
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123456789
      - POSTGRES_DB=managertime
      - POSTGRES_HOST=localhost
      - POSTGRES_PORT=5000
      - POSTGRES_REJECTUNAUTHORIZED=false
      - POSTGRES_DIALECT=postgres
      - SECRET_KEY_ENCRYPT=1234567890
    networks:
      - front-tier
      - back-tier
    
  frontend:
    image: node:20.12.2-alpine3.19
    command: sh -c "npm install && npm run build && npm run serve"
    ports:
      - 5002:5002
    working_dir: /frontend
    volumes:
      - "./frontend:/frontend"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
      start_interval: 5s
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - front-tier
  
  db:
    image: postgres
    ports:
      - 5000:5432
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "123456789"
    volumes:
      - "db-data:/var/lib/postgresql/data"
      - "./healthchecks:/healthchecks"
      - "./backend/.sqlfiles/consider_only:/docker-entrypoint-initdb.d"
    healthcheck:
      test: /healthchecks/postgres.sh
      interval: "5s"
    networks:
      - back-tier
  
volumes:
    db-data:
  
networks:
  front-tier:
  back-tier:
